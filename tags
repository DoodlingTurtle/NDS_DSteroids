!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Asteroid	./source/asteroid.h	/^class Asteroid $/;"	c
Broadcast	./modules/RGNDS_Engine/broadcast.h	/^    class Broadcast {$/;"	c	namespace:RGNDS
BroadcastEvent	./source/broadcastchannels.h	/^enum BroadcastEvent {$/;"	g
C2COverlapDist	./source/collision.h	/^            float C2COverlapDist;$/;"	m	class:RGNDS::Collision
C2COverlapImpact	./source/collision.h	/^            float C2COverlapImpact;$/;"	m	class:RGNDS::Collision
Collision	./source/collision.h	/^    class Collision$/;"	c	namespace:RGNDS
ENGINE_SCREEN_BOTTOM	./modules/RGNDS_Engine/engine.h	/^                ENGINE_SCREEN_BOTTOM$/;"	e	enum:RGNDS::Engine::Screen
ENGINE_SCREEN_TOP	./modules/RGNDS_Engine/engine.h	/^                ENGINE_SCREEN_TOP,$/;"	e	enum:RGNDS::Engine::Screen
Engine	./modules/RGNDS_Engine/engine.h	/^    class Engine {$/;"	c	namespace:RGNDS
Engine_Color16	./modules/RGNDS_Engine/engine.h	24;"	d
Engine_Debug_Init	./modules/RGNDS_Engine/engine.h	16;"	d
Engine_Debug_Init	./modules/RGNDS_Engine/engine.h	19;"	d
Engine_Log	./modules/RGNDS_Engine/engine.h	17;"	d
Engine_Log	./modules/RGNDS_Engine/engine.h	20;"	d
Engine_RandF	./modules/RGNDS_Engine/engine.h	23;"	d
FontTilesTextureID	./modules/RGNDS_Engine/engine.h	/^            static int FontTilesTextureID;$/;"	m	class:RGNDS::Engine
GAMESTATEMAINGAME_H	./source/gamestatemaingame.h	2;"	d
GL2D	./modules/RGNDS_Engine/gl2d.h	/^    namespace GL2D {$/;"	n	namespace:RGNDS
GL2D	./modules/RGNDS_Engine/gl2d_polyshape.h	/^    namespace GL2D {$/;"	n	namespace:RGNDS
GL_FLIP_H	./modules/RGNDS_Engine/gl2d.h	/^        GL_FLIP_H$/;"	e	enum:RGNDS::GL_FLIP_MODE
GL_FLIP_MODE	./modules/RGNDS_Engine/gl2d.h	/^    enum GL_FLIP_MODE {$/;"	g	namespace:RGNDS
GL_FLIP_NONE	./modules/RGNDS_Engine/gl2d.h	/^        GL_FLIP_NONE = 0,$/;"	e	enum:RGNDS::GL_FLIP_MODE
GL_FLIP_V	./modules/RGNDS_Engine/gl2d.h	/^        GL_FLIP_V,$/;"	e	enum:RGNDS::GL_FLIP_MODE
GameStateMainGame	./source/gamestatemaingame.h	/^class GameStateMainGame : public RGNDS::Engine$/;"	c
MAX_ASTEROIDS	./source/gamestatemaingame.h	13;"	d
MainGameDrawData	./source/gamestatemaingame.h	/^struct MainGameDrawData {$/;"	s
MainGameUpdateData	./source/gamestatemaingame.h	/^struct MainGameUpdateData {$/;"	s
PI	./modules/RGNDS_Engine/engine.h	7;"	d
PI2	./modules/RGNDS_Engine/engine.h	11;"	d
Point	./modules/RGNDS_Engine/inc/point.h	/^    struct Point {$/;"	s	namespace:RGNDS
PolyShape	./modules/RGNDS_Engine/gl2d_polyshape.h	/^        class PolyShape {$/;"	c	namespace:RGNDS::GL2D
RGNDS	./modules/RGNDS_Engine/broadcast.h	/^namespace RGNDS$/;"	n
RGNDS	./modules/RGNDS_Engine/engine.h	/^namespace RGNDS {$/;"	n
RGNDS	./modules/RGNDS_Engine/gl2d.h	/^namespace RGNDS {$/;"	n
RGNDS	./modules/RGNDS_Engine/gl2d_polyshape.h	/^namespace RGNDS {$/;"	n
RGNDS	./modules/RGNDS_Engine/inc/fonts_res.h	/^namespace RGNDS {$/;"	n
RGNDS	./modules/RGNDS_Engine/inc/point.h	/^namespace RGNDS {$/;"	n
RGNDS	./modules/RGNDS_Engine/inc/timer.h	/^namespace RGNDS {$/;"	n
RGNDS	./modules/RGNDS_Engine/transform.h	/^namespace RGNDS {$/;"	n
RGNDS	./source/collision.h	/^namespace RGNDS {$/;"	n
SHIPENGINE_H	./source/shipengine.h	2;"	d
SHIP_H	./source/ship.h	2;"	d
ScorePopup	./source/scorepopup.h	/^class ScorePopup {$/;"	c
Screen	./modules/RGNDS_Engine/engine.h	/^            enum Screen {$/;"	g	class:RGNDS::Engine
Ship	./source/ship.h	/^class Ship : public SpaceObj {$/;"	c
ShipEngine	./source/shipengine.h	/^class ShipEngine$/;"	c
Shot	./source/shot.h	/^class Shot : public RGNDS::GL2D::PolyShape, public SpaceObj {$/;"	c
SpaceObj	./source/spaceobj.h	/^class SpaceObj : public RGNDS::Transform {$/;"	c
Star	./source/gamestatemaingame.h	/^        struct Star {$/;"	s	class:GameStateMainGame
Timer	./modules/RGNDS_Engine/inc/timer.h	/^    namespace Timer {$/;"	n	namespace:RGNDS
Transform	./modules/RGNDS_Engine/transform.h	/^    class Transform {$/;"	c	namespace:RGNDS
WRAPAROUNDRENDERER_H	./source/wraparoundrenderer.h	2;"	d
WrapAroundRenderer	./source/wraparoundrenderer.h	/^class WrapAroundRenderer$/;"	c
_8x8pixelfont_palette	./modules/RGNDS_Engine/inc/fonts_res.h	/^    u16 _8x8pixelfont_palette[4] = {$/;"	m	namespace:RGNDS
_8x8pixelfont_pixels	./modules/RGNDS_Engine/inc/fonts_res.h	/^    u8 _8x8pixelfont_pixels[4096] = {$/;"	m	namespace:RGNDS
__ASTEROID_H__	./source/asteroid.h	2;"	d
__BROADCASTCHANNELS_H__	./source/broadcastchannels.h	2;"	d
__COLLISION_H__	./source/collision.h	2;"	d
__RGNDS_BROADCAST_H__	./modules/RGNDS_Engine/broadcast.h	2;"	d
__RGNDS_ENGINE_H__	./modules/RGNDS_Engine/engine.h	2;"	d
__RGNDS_FONT_RES_CPP__	./modules/RGNDS_Engine/inc/fonts_res.h	2;"	d
__RGNDS_GL2D_H__	./modules/RGNDS_Engine/gl2d.h	2;"	d
__RGNDS_GL2D_POLYSHAPE_H__	./modules/RGNDS_Engine/gl2d_polyshape.h	2;"	d
__RGNDS_POINT_H__	./modules/RGNDS_Engine/inc/point.h	2;"	d
__RGNDS_TIMER_H__	./modules/RGNDS_Engine/inc/timer.h	2;"	d
__RGNDS_TRANSFORM_H__	./modules/RGNDS_Engine/transform.h	2;"	d
__SHOT_H__	./source/shot.h	2;"	d
__SPACEOBJ_H__	./source/spaceobj.h	2;"	d
__ScorePopup_H__	./source/scorepopup.h	2;"	d
_default	./modules/RGNDS_Engine/transform.h	/^        static Transform _default;$/;"	m	class:RGNDS::Transform
_instances	./source/scorepopup.h	/^    static std::vector<ScorePopup*> _instances;$/;"	m	class:ScorePopup
_instances	./source/shot.h	/^    static std::vector<Shot*> _instances;$/;"	m	class:Shot
acceleration	./source/shipengine.h	/^        float acceleration;$/;"	m	class:ShipEngine
alpha	./source/gamestatemaingame.h	/^            int alpha;$/;"	m	struct:GameStateMainGame::Star
ang	./modules/RGNDS_Engine/transform.h	/^        float ang = 0.0;$/;"	m	class:RGNDS::Transform
angRes	./source/ship.h	/^        float angRes = PI\/20;$/;"	m	class:Ship
asteroids	./source/gamestatemaingame.h	/^		std::vector<Asteroid*> asteroids;$/;"	m	class:GameStateMainGame
bceDead	./source/broadcastchannels.h	/^    bceDead,$/;"	e	enum:BroadcastEvent
bceDraw	./source/broadcastchannels.h	/^    bceDraw$/;"	e	enum:BroadcastEvent
bceGameStart	./source/broadcastchannels.h	/^    bceGameStart,$/;"	e	enum:BroadcastEvent
bceHitPlayer	./source/broadcastchannels.h	/^    bceHitPlayer,$/;"	e	enum:BroadcastEvent
bceMove	./source/broadcastchannels.h	/^    bceMove = 0,$/;"	e	enum:BroadcastEvent
bcePlayerShotsFired	./source/broadcastchannels.h	/^    bcePlayerShotsFired,$/;"	e	enum:BroadcastEvent
bceSpawn	./source/broadcastchannels.h	/^    bceSpawn,$/;"	e	enum:BroadcastEvent
bceTick	./source/broadcastchannels.h	/^    bceTick,$/;"	e	enum:BroadcastEvent
bottom	./source/wraparoundrenderer.h	/^        int top, right, bottom, left, width, height;$/;"	m	class:WrapAroundRenderer
broadcast	./source/asteroid.h	/^        static RGNDS::Broadcast broadcast;$/;"	m	class:Asteroid
broadcast	./source/ship.h	/^        static RGNDS::Broadcast broadcast;$/;"	m	class:Ship
broadcast	./source/shot.h	/^    static RGNDS::Broadcast broadcast;$/;"	m	class:Shot
color	./modules/RGNDS_Engine/gl2d_polyshape.h	/^            unsigned short color;$/;"	m	class:RGNDS::GL2D::PolyShape
deltaTime	./source/gamestatemaingame.h	/^    float deltaTime; $/;"	m	struct:MainGameUpdateData
deltaTime	./source/gamestatemaingame.h	/^    float deltaTime;$/;"	m	struct:MainGameDrawData
dir	./modules/RGNDS_Engine/transform.h	/^        Point<float> dir = {1.0f, 0.0f};$/;"	m	class:RGNDS::Transform
dist	./modules/RGNDS_Engine/inc/point.h	/^        T dist() const {$/;"	f	struct:RGNDS::Point
drawingInstanceCnt	./source/wraparoundrenderer.h	/^        byte drawingInstanceCnt = 1;$/;"	m	class:WrapAroundRenderer
drawingInstances	./source/wraparoundrenderer.h	/^        RGNDS::Point<float> drawingInstances[4];$/;"	m	class:WrapAroundRenderer
game_difficulty	./source/gamestatemaingame.h	/^        static float game_difficulty;        \/\/ difficulty goes from 1 to 16;$/;"	m	class:GameStateMainGame
glImage	./modules/RGNDS_Engine/gl2d.h	/^} glImage;$/;"	t	typeref:struct:__anon1
heartbeat	./source/scorepopup.h	/^    static std::function<void(int, void*)> heartbeat;$/;"	m	class:ScorePopup
heartbeat	./source/ship.h	/^        std::function<void(int, void*)> heartbeat;$/;"	m	class:Ship
heartbeat	./source/shot.h	/^    static std::function<void(int, void*)> heartbeat;$/;"	m	class:Shot
height	./modules/RGNDS_Engine/gl2d.h	/^            int 	height;		\/*!< Height of the Sprite *\/$/;"	m	struct:__anon1
height	./source/wraparoundrenderer.h	/^        int top, right, bottom, left, width, height;$/;"	m	class:WrapAroundRenderer
initialized	./modules/RGNDS_Engine/engine.h	/^            static bool initialized;    \/\/ tells if the Engine has been initialized$/;"	m	class:RGNDS::Engine
keepRunning	./modules/RGNDS_Engine/engine.h	/^            bool keepRunning;           \/\/ set to false, if the Main-Loop should stop to repeat itself$/;"	m	class:RGNDS::Engine
keys_held	./source/gamestatemaingame.h	/^    int keys_held; $/;"	m	struct:MainGameUpdateData
keys_justpressed	./source/gamestatemaingame.h	/^    int keys_justpressed; $/;"	m	struct:MainGameUpdateData
keys_up	./source/gamestatemaingame.h	/^    int keys_up; $/;"	m	struct:MainGameUpdateData
left	./source/wraparoundrenderer.h	/^        int top, right, bottom, left, width, height;$/;"	m	class:WrapAroundRenderer
lifetime	./source/scorepopup.h	/^    byte lifetime;      \/\/ for how many ticks this popup will stay $/;"	m	class:ScorePopup
lifetime	./source/shot.h	/^    int lifetime = 1000;$/;"	m	class:Shot
listeners	./modules/RGNDS_Engine/broadcast.h	/^        std::vector<std::function<void(int, void*)>*> listeners;$/;"	m	class:RGNDS::Broadcast
mainGameBroadcast	./source/gamestatemaingame.h	/^        RGNDS::Broadcast mainGameBroadcast;$/;"	m	class:GameStateMainGame
mainGameBroadcast	./source/scorepopup.h	/^    RGNDS::Broadcast* mainGameBroadcast;$/;"	m	class:ScorePopup
normalize	./modules/RGNDS_Engine/inc/point.h	/^        Point<T> normalize() const {$/;"	f	struct:RGNDS::Point
numPoints	./modules/RGNDS_Engine/gl2d_polyshape.h	/^            short numPoints = 0;$/;"	m	class:RGNDS::GL2D::PolyShape
objRadius	./source/spaceobj.h	/^    float objRadius;$/;"	m	class:SpaceObj
onAsteroidBroadcast	./source/gamestatemaingame.h	/^        std::function<void(int, void*)> onAsteroidBroadcast;$/;"	m	class:GameStateMainGame
onDraw	./modules/RGNDS_Engine/engine.h	/^            virtual void onDraw(float deltaTime, Screen screen){};$/;"	f	class:RGNDS::Engine
onEnd	./modules/RGNDS_Engine/engine.h	/^            virtual void onEnd(){}$/;"	f	class:RGNDS::Engine
onGameHeartbeat	./source/asteroid.h	/^        std::function<void(int, void*)> onGameHeartbeat;$/;"	m	class:Asteroid
onShipAction	./source/asteroid.h	/^		static std::function<void(int, void*)> onShipAction;$/;"	m	class:Asteroid
onShotAction	./source/asteroid.h	/^        static std::function<void(int, void*)> onShotAction;$/;"	m	class:Asteroid
onStart	./modules/RGNDS_Engine/engine.h	/^            virtual int onStart(){ return 2; }$/;"	f	class:RGNDS::Engine
onUpdate	./modules/RGNDS_Engine/engine.h	/^            virtual void onUpdate( float deltaTime ){};$/;"	f	class:RGNDS::Engine
operator *	./modules/RGNDS_Engine/inc/point.h	/^        Point<T> operator*(const A& p) const {$/;"	f	struct:RGNDS::Point
operator *	./modules/RGNDS_Engine/inc/point.h	/^        Point<T> operator*(const Point<A>& p) const {$/;"	f	struct:RGNDS::Point
operator *=	./modules/RGNDS_Engine/inc/point.h	/^        Point<T>* operator*=(const A& p) {$/;"	f	struct:RGNDS::Point
operator *=	./modules/RGNDS_Engine/inc/point.h	/^        Point<T>* operator*=(const Point<A>& p) {$/;"	f	struct:RGNDS::Point
operator +	./modules/RGNDS_Engine/inc/point.h	/^        Point<T> operator+(const Point<A>& p) const {$/;"	f	struct:RGNDS::Point
operator +=	./modules/RGNDS_Engine/inc/point.h	/^        Point<T>* operator+=(const A& p) {$/;"	f	struct:RGNDS::Point
operator +=	./modules/RGNDS_Engine/inc/point.h	/^        Point<T>* operator+=(const Point<A>& p) {$/;"	f	struct:RGNDS::Point
operator -	./modules/RGNDS_Engine/inc/point.h	/^        Point<T> operator-(const A& p) const {$/;"	f	struct:RGNDS::Point
operator -	./modules/RGNDS_Engine/inc/point.h	/^        Point<T> operator-(const Point<A>& p) const {$/;"	f	struct:RGNDS::Point
operator /	./modules/RGNDS_Engine/inc/point.h	/^        Point<T> operator\/(const A& p) const {$/;"	f	struct:RGNDS::Point
operator =	./modules/RGNDS_Engine/inc/point.h	/^        Point<T>* operator=(const Point<A>& p) const {$/;"	f	struct:RGNDS::Point
overlapDir	./source/collision.h	/^            Point<float> overlapDir;$/;"	m	class:RGNDS::Collision
ph	./source/ship.h	/^        ShipEngine ph;$/;"	m	class:Ship
points	./modules/RGNDS_Engine/gl2d_polyshape.h	/^            Point<double> *points;$/;"	m	class:RGNDS::GL2D::PolyShape
pos	./modules/RGNDS_Engine/transform.h	/^        Point<float>   pos;$/;"	m	class:RGNDS::Transform
renderer	./source/spaceobj.h	/^    WrapAroundRenderer renderer;$/;"	m	class:SpaceObj
rendertype	./modules/RGNDS_Engine/gl2d_polyshape.h	/^            GL_GLBEGIN_ENUM rendertype;$/;"	m	class:RGNDS::GL2D::PolyShape
right	./source/wraparoundrenderer.h	/^        int top, right, bottom, left, width, height;$/;"	m	class:WrapAroundRenderer
scale	./modules/RGNDS_Engine/transform.h	/^        float scale = 1.0f;$/;"	m	class:RGNDS::Transform
score	./source/gamestatemaingame.h	/^        int score = 0;$/;"	m	class:GameStateMainGame
score	./source/scorepopup.h	/^    short score;        \/\/ Keeps track of what score is displayed$/;"	m	class:ScorePopup
scoreTimer	./source/gamestatemaingame.h	/^        float scoreTimer;$/;"	m	class:GameStateMainGame
scorelocation	./source/gamestatemaingame.h	/^        RGNDS::Transform scorelocation;$/;"	m	class:GameStateMainGame
screen	./source/gamestatemaingame.h	/^    RGNDS::Engine::Screen screen;$/;"	m	struct:MainGameDrawData
shaBody	./source/ship.h	/^        RGNDS::GL2D::PolyShape* shaBody;$/;"	m	class:Ship
shaThruster	./source/ship.h	/^        RGNDS::GL2D::PolyShape* shaThruster;$/;"	m	class:Ship
ship	./source/asteroid.h	/^        static Ship* ship;$/;"	m	class:Asteroid
ship	./source/gamestatemaingame.h	/^        Ship ship;$/;"	m	class:GameStateMainGame
shots	./source/asteroid.h	/^        static std::vector<Shot*> shots;$/;"	m	class:Asteroid
spinSpeed	./source/asteroid.h	/^        float spinSpeed;$/;"	m	class:Asteroid
stars	./source/gamestatemaingame.h	/^        std::vector<Star> stars;$/;"	m	class:GameStateMainGame
textureID	./modules/RGNDS_Engine/gl2d.h	/^            int		textureID;  \/*!< Texture handle ( used in glDeleteTextures() ) <Br>$/;"	m	struct:__anon1
thrusting	./source/ship.h	/^        bool thrusting = false;$/;"	m	class:Ship
to	./modules/RGNDS_Engine/inc/point.h	/^        Point<A> to() const {$/;"	f	struct:RGNDS::Point
top	./source/wraparoundrenderer.h	/^        int top, right, bottom, left, width, height;$/;"	m	class:WrapAroundRenderer
touch	./source/gamestatemaingame.h	/^    touchPosition touch;$/;"	m	struct:MainGameUpdateData
tra	./source/scorepopup.h	/^    RGNDS::Transform tra;$/;"	m	class:ScorePopup
translate	./modules/RGNDS_Engine/transform.h	/^    void Transform::translate(Point<TI>* in, Point<TO>* out, Transform* parent) {$/;"	f	class:RGNDS::Transform
u_off	./modules/RGNDS_Engine/gl2d.h	/^            int 	u_off;		\/*!< S texture offset *\/$/;"	m	struct:__anon1
v_off	./modules/RGNDS_Engine/gl2d.h	/^            int 	v_off;		\/*!< T texture offset *\/$/;"	m	struct:__anon1
velocity	./source/spaceobj.h	/^    RGNDS::Point<double> velocity;$/;"	m	class:SpaceObj
width	./modules/RGNDS_Engine/gl2d.h	/^            int		width;		\/*!< Width of the Sprite *\/$/;"	m	struct:__anon1
width	./source/wraparoundrenderer.h	/^        int top, right, bottom, left, width, height;$/;"	m	class:WrapAroundRenderer
x	./modules/RGNDS_Engine/inc/point.h	/^        T x = 0, y = 0;$/;"	m	struct:RGNDS::Point
x	./source/gamestatemaingame.h	/^            int x;$/;"	m	struct:GameStateMainGame::Star
y	./modules/RGNDS_Engine/inc/point.h	/^        T x = 0, y = 0;$/;"	m	struct:RGNDS::Point
y	./source/gamestatemaingame.h	/^            int y;$/;"	m	struct:GameStateMainGame::Star
